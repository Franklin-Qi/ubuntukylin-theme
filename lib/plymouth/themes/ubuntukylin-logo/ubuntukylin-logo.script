/*
 * Copyright (C) 2013 National University of Defense Technology(NUDT) & Kylin Ltd.
 *
 * Authors:
 *	Zhang Chao	zctgbhu@163.com
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; version 3.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
//背景
Window.SetBackgroundTopColor (0, 0, 0);           
Window.SetBackgroundBottomColor (0, 0, 0); 
//光环
halo_image = Image("halo.png");
halo_sprite = Sprite();
if(Window.GetWidth()/Window.GetHeight()<1.5){
ratio_fix=0.75;
resized_halo_image = halo_image.Scale(Window.GetWidth()/5.0*0.75, Window.GetWidth()/5.0);
}else{
ratio_fix=1;
resized_halo_image = halo_image.Scale(Window.GetWidth()/5, Window.GetWidth()/5);
}
halo_sprite.SetImage(resized_halo_image);
halo_sprite.SetX(Window.GetWidth()  / 2 - resized_halo_image.GetWidth() / 2); 
halo_sprite.SetY(Window.GetHeight() / 2 - resized_halo_image.GetHeight() / 2);
halo_sprite.SetZ(1000);
r=resized_halo_image.GetHeight()/2-resized_halo_image.GetHeight()/halo_image.GetHeight()*52;
//光束
light_images = Image("light.png");
light_ratio = light_images.GetWidth()/light_images.GetHeight();
light_sprite = Sprite();
resized_light_image = light_images.Scale(Window.GetHeight()/3 * light_ratio , Window.GetHeight()/3);
//light_sprite.SetImage(resized_light_image);
light_sprite.SetZ(10000);
progress = 0;
//星星
xx_image = Image("xx.png");
xx1_image = Image("xx1.png");
xx2_image = Image("xx2.png");
xxnum=20;
for(i=0;i<xxnum;i++){
  xx_sprite[i]=Sprite(xx_image);
  xx_sprite[i].SetOpacity(0);
  xx1_sprite[i]=Sprite(xx1_image);
  xx1_sprite[i].SetOpacity(0);
  xx2_sprite[i]=Sprite(xx2_image);
  xx2_sprite[i].SetOpacity(0);
}
//ubuntu-logo
ubuntu_logo=Image("ubuntu0.png");
ubuntu_images=ubuntu_logo.Scale(ubuntu_logo.GetWidth()*ratio_fix, ubuntu_logo.GetWidth());
ubuntu_sprite = Sprite();
ubuntu_sprite.SetZ(10000);

//kylin-logo
kylin_logo = Image("kylin.png");
kylin_image=kylin_logo.Scale(kylin_logo.GetWidth()*ratio_fix, kylin_logo.GetWidth());
kylin_sprite = Sprite(kylin_image);
kylin_sprite.SetX(Window.GetWidth()  / 2 - kylin_image.GetWidth() / 2); 
kylin_sprite.SetY(Window.GetHeight() / 2 - kylin_image.GetHeight() / 2);
kylin_sprite.SetZ(10000);


fun refresh_callback ()
  {
    # Currently we do nothing here
    
    theta = progress / 100;
    opacity= (Math.Sin(theta)+1)/3+0.33;
    #x=Math.Cos(theta) * 300
    #y=Math.Sin(theta) * 200
    
    light_sprite.SetX(Window.GetWidth() / 2 - resized_light_image.GetWidth() / 2 + Math.Cos(theta) * r * ratio_fix);
    light_sprite.SetY(Window.GetHeight() / 2 - resized_light_image.GetHeight() / 2 + Math.Sin(theta) * r);
    
    light_sprite.SetImage(resized_light_image.Rotate(theta+3.14));
    halo_sprite.SetOpacity(opacity);
    //light_sprite.SetOpacity(opacity);

    ubuntu_sprite.SetX(Window.GetWidth() / 2 - ubuntu_images.GetWidth() / 2 );
    ubuntu_sprite.SetY(Window.GetHeight() / 2 - ubuntu_images.GetHeight() / 2 );
    ubuntu_sprite.SetImage(ubuntu_images);
    if(ratio_fix==0.75){
    ubuntu_sprite.SetImage(ubuntu_images);
    }else{
    ubuntu_sprite.SetImage(ubuntu_images.Rotate(theta));
    }
    ubuntu_sprite.SetOpacity((Math.Cos(theta)+1)/3+0.33);
    if(progress < 800){
    	if(progress%40==0){
    	xx_sprite[progress/40].SetX(Math.Int(Math.Random(10)*Window.GetWidth()));
    	xx_sprite[progress/40].SetY(Math.Int(Math.Random(10)*Window.GetHeight()));
    	xx1_sprite[progress/40].SetX(Math.Int(Math.Random(10)*Window.GetWidth()));
    	xx1_sprite[progress/40].SetY(Math.Int(Math.Random(10)*Window.GetHeight()));
    	xx2_sprite[progress/40].SetX(Math.Int(Math.Random(10)*Window.GetWidth()));
    	xx2_sprite[progress/40].SetY(Math.Int(Math.Random(10)*Window.GetHeight()));
    	}
    	xx_sprite[Math.Int(progress/40)].SetOpacity((progress%40)/40);
    	xx1_sprite[Math.Int(progress/40)].SetOpacity((progress%40)/40);
    	xx2_sprite[Math.Int(progress/40)].SetOpacity((progress%40)/40);
    }else{
        if(progress%80 < 40){
        xx_sprite[Math.Int(progress/80)% 20].SetOpacity(1-(progress%80)/40);
    	xx1_sprite[Math.Int(progress/80)% 20].SetOpacity(1-(progress%80)/40);
    	xx2_sprite[Math.Int(progress/80)% 20].SetOpacity(1-(progress%80)/40);
	}else{
           if(progress%80==40){
	   	xx_sprite[Math.Int(progress/80)% 20].SetX(Math.Int(Math.Random(10)*Window.GetWidth()));
    		xx_sprite[Math.Int(progress/80)% 20].SetY(Math.Int(Math.Random(10)*Window.GetHeight()));
    		xx1_sprite[Math.Int(progress/80)% 20].SetX(Math.Int(Math.Random(10)*Window.GetWidth()));
    		xx1_sprite[Math.Int(progress/80)% 20].SetY(Math.Int(Math.Random(10)*Window.GetHeight()));
    		xx2_sprite[Math.Int(progress/80)% 20].SetX(Math.Int(Math.Random(10)*Window.GetWidth()));
    		xx2_sprite[Math.Int(progress/80)% 20].SetY(Math.Int(Math.Random(10)*Window.GetHeight()));
	   }
           xx_sprite[Math.Int(progress/80)% 20].SetOpacity((progress%80)/40);
    	   xx1_sprite[Math.Int(progress/80)% 20].SetOpacity((progress%80)/40);
    	   xx2_sprite[Math.Int(progress/80)% 20].SetOpacity((progress%80)/40);
        }
    }
 progress+=2; 
 }

  
Plymouth.SetRefreshFunction (refresh_callback);



#----------------------------------------- Progress Bar --------------------------------


fun progress_callback (duration, progress)
  {
    
  }

Plymouth.SetBootProgressFunction(progress_callback);

#----------------------------------------- Quit --------------------------------

fun quit_callback ()
{
}

Plymouth.SetQuitFunction(quit_callback);


